"""
SHAPE Summer 2022

In this assignment you will implement and compare different search strategies
for solving the n-Puzzle, which is a generalization of the 8 and 15 puzzle to
squares of arbitrary size (we will only test it with 8-puzzles for now).
See Courseworks for detailed instructions.
"""

import time
import math
from heapq import heappush, heappop

def state_to_string(state):
    row_strings = [" ".join([str(cell) for cell in row]) for row in state]
    return "\n".join(row_strings)

def swap_cells(state, i1, j1, i2, j2):
    """
    Returns a new state with the cells (i1, j1) and (i2, j2) swapped.
    """
    value1 = state[i1][j1]
    value2 = state[i2][j2]
   
    new_state = []
    for row in range(len(state)):
        new_row = []
        for column in range(len(state[row])):
            if row == i1 and column == j1:
                new_row.append(value2)
            elif row == i2 and column == j2:
                new_row.append(value1)
            else:
                new_row.append(state[row][column])
        new_state.append(tuple(new_row))
    return tuple(new_state)

def get_successors(state):
    """
    Returns a list of possible successor states resulting from applicable actions.
    The result should be a list containing (Action, state) tuples.
    """
    child_states = []
    for row in range(len(state)):
        for column in range(len(state[row])):
            if state[row][column] == 0:
                if column < len(state) - 1:
                    new_state = swap_cells(state, row, column, row, column + 1)
                    child_states.append(("Left", new_state))
                if column > 0:
                    new_state = swap_cells(state, row, column, row, column - 1)
                    child_states.append(("Right", new_state))
                if row < len(state) - 1:
                    new_state = swap_cells(state, row, column, row + 1, column)
                    child_states.append(("Up", new_state))
                if row > 0:
                    new_state = swap_cells(state, row, column, row - 1, column)
                    child_states.append(("Down", new_state))
                break
    return child_states

def goal_test(state):
    """
    Returns True if the state is a goal state, False otherwise.
    """    
    counter = 0
    for row in state:
        for cell in row:
            if counter != cell:
                return False
            counter += 1
    return True

def bfs(state):
    """
    Breadth-first search.
    """
    prev = {}
    actions = {}
    total_visited_states = 0  
    queue = [state]
    visited = set()
   
    while queue:
        v = queue.pop(0)
        visited.add(v)
        total_visited_states += 1
        successors = get_successors(v)
        for action, adj in successors:
            if adj not in visited:
                prev[adj] = v
                actions[adj] = action
                if goal_test(v):
                    result = []
                    while v != state:
                        result.append(actions[v])
                        v = prev[v]
                    print(result[::-1])
                    return result[::-1]
                queue.append(adj)
                visited.add(adj)

    print("Total visited states:", total_visited_states)

def dfs(state):
    """
    Depth-first search.
    """
    prev = {}
    actions = {}
    total_visited_states = 0  
    stack = [state]
    visited = set()
   
    while stack:
        v = stack.pop()
        visited.add(v)
        total_visited_states += 1
        successors = get_successors(v)
        for action, adj in successors:
            if adj not in visited:
                prev[adj] = v
                actions[adj] = action
                if goal_test(v):
                    result = []
                    while v != state:
                        result.append(actions[v])
                        v = prev[v]
                    print(result[::-1])
                    return result[::-1]
                stack.append(adj)
                visited.add(adj)

    print("Total visited states:", total_visited_states)

def misplaced_heuristic(state):
    """
    Returns the number of misplaced tiles.
    """
    misplaced_count = 0
    target = 0
    for row in state:
        for cell in row:
            if cell != target:
                misplaced_count += 1
            target += 1
    return misplaced_count

def manhattan_heuristic(state):
    """
    Returns the sum of the Manhattan distances of each tile from its goal position.
    """
    manhattan_distance = 0
    for i, row in enumerate(state):
        for j, cell in enumerate(row):
            if cell != 0:  # Skip the blank tile
                target_row, target_col = divmod(cell, len(state))
                manhattan_distance += abs(target_row - i) + abs(target_col - j)
    return manhattan_distance

def print_result(solution):
    """
    Helper function to format test output.
    """
    if solution is None:
        print("No solution found.")
    else:
        print("Solution has {} actions.".format(len(solution)))

if __name__ == "__main__":

    test_state = ((1, 4, 2),
                  (0, 5, 8),
                  (3, 6, 7))  

    print(state_to_string(test_state))
    print()
    print("Manhattan Heuristic:", manhattan_heuristic(test_state))
    print("Misplaced Heuristic:", misplaced_heuristic(test_state))
    print("====BFS====")
    start = time.time()
    solution = bfs(test_state)
    end = time.time()
    print_result(solution)
    print("Total time: {0:.3f}s".format(end - start))

    print("\n====DFS====")
    start = time.time()
    solution = dfs(test_state)
    end = time.time()
    print_result(solution)
    print("Total time: {0:.3f}s".format(end - start))


